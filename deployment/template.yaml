AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  guidance-search
  Sample SAM Template for guidance-search

Globals:
  Function:
    Timeout: 60
    MemorySize: 128
    LoggingConfig:
      LogFormat: JSON

Parameters:
  CollectionName:
    Description: 'Name of the collection to use for the search index'
    Type: 'String'
    Default: 'search-collection'

  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24


Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2


  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC
      SecurityGroupEgress:
      - Description: Allow all outbound traffic
        IpProtocol: "-1"
        CidrIp: 0.0.0.0/0

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http access to lambda
      VpcId: !Ref VPC
      SecurityGroupEgress:
      - Description: Allow all outbound traffic
        IpProtocol: "-1"
        CidrIp: 0.0.0.0/0

  FeatureExtractionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: './feature-extraction/'
      Description: 'Takes a product description as input and returns a JSON with products features'
      MemorySize: 128
      Timeout: 60
      Handler: lambda_function.lambda_handler
      Runtime: python3.12
      Architectures:
        - arm64
      EphemeralStorage:
        Size: 512
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 21600
        MaximumRetryAttempts: 2
      PackageType: Zip
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt  DeadLetterQueue.Arn
      ReservedConcurrentExecutions: 10
      KmsKeyArn: !GetAtt  KMSKeyEnhancementFunction.Arn
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
              Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/title-enhancer:*"
            - Sid: BedrockAll
              Effect: Allow
              Action:
                - bedrock:InvokeModel
                - bedrock:ListFoundationModels
              Resource:
                - arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0
                - arn:aws:bedrock:us-east-1::inference-profile/us.anthropic.claude-3-sonnet-20240229-v1:0
                - arn:aws:bedrock:us-west-2::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0
                - !Sub arn:aws:bedrock:us-east-1:${AWS::AccountId}:foundation-model/anthropic.claude-3-sonnet-20240229-v1:0
                - !Sub arn:aws:bedrock:us-east-1:${AWS::AccountId}:inference-profile/us.anthropic.claude-3-sonnet-20240229-v1:0
                - !Sub arn:aws:bedrock:us-west-2:${AWS::AccountId}:foundation-model/anthropic.claude-3-sonnet-20240229-v1:0                      
            - Sid: DescribeKey
              Effect: Allow
              Action:
                - kms:DescribeKey
              Resource: !Sub 'arn:*:kms:${AWS::Region}:${AWS::AccountId}::*'
            - Sid: APIsWithAllResourceAccess
              Effect: Allow
              Action:
                - iam:ListRoles
                - ec2:DescribeVpcs
                - ec2:DescribeSubnets
                - ec2:DescribeSecurityGroups
              Resource: '*'
            - Sid: PassRoleToBedrock
              Effect: Allow
              Action:
                - iam:PassRole
              Resource: arn:aws:iam::*:role/*AmazonBedrock*
              Condition:
                StringEquals:
                  iam:PassedToService:
                    - bedrock.amazonaws.com
      RecursiveLoop: Terminate
      SnapStart:
        ApplyOn: None
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto

  DescriptionEnhancerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: './description-enhancer/'
      Description: 'This Lambda function takes a product description as input and returns a modified version of the title generated using a language model.'
      MemorySize: 128
      Timeout: 60
      Handler: lambda_function.lambda_handler
      Runtime: python3.12
      Architectures:
        - arm64
      EphemeralStorage:
        Size: 512
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 21600
        MaximumRetryAttempts: 2
      PackageType: Zip
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt  DeadLetterQueue.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2        
      ReservedConcurrentExecutions: 10
      KmsKeyArn: !GetAtt  KMSKeyEnhancementFunction.Arn
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
              Resource:  !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                -  !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/title-enhancer:*'
            - Sid: BedrockAll
              Effect: Allow
              Action:
                - bedrock:InvokeModel
                - bedrock:ListFoundationModels
              Resource:
                - arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0
                - arn:aws:bedrock:us-east-1::inference-profile/us.anthropic.claude-3-sonnet-20240229-v1:0
                - arn:aws:bedrock:us-west-2::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0
                - !Sub arn:aws:bedrock:us-east-1:${AWS::AccountId}:foundation-model/anthropic.claude-3-sonnet-20240229-v1:0
                - !Sub arn:aws:bedrock:us-east-1:${AWS::AccountId}:inference-profile/us.anthropic.claude-3-sonnet-20240229-v1:0
                - !Sub arn:aws:bedrock:us-west-2:${AWS::AccountId}:foundation-model/anthropic.claude-3-sonnet-20240229-v1:0                      
            - Sid: DescribeKey
              Effect: Allow
              Action:
                - kms:DescribeKey
              Resource: !Sub 'arn:*:kms:${AWS::Region}:${AWS::AccountId}::*'
            - Sid: APIsWithAllResourceAccess
              Effect: Allow
              Action:
                - iam:ListRoles
                - ec2:DescribeVpcs
                - ec2:DescribeSubnets
                - ec2:DescribeSecurityGroups
              Resource: '*'
            - Sid: PassRoleToBedrock
              Effect: Allow
              Action:
                - iam:PassRole
              Resource: arn:aws:iam::*:role/*AmazonBedrock*
              Condition:
                StringEquals:
                  iam:PassedToService:
                    - bedrock.amazonaws.com
      RecursiveLoop: Terminate
      SnapStart:
        ApplyOn: None
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto
  

  # PandasLambdaLayer:
  #   Type: AWS::Serverless::LayerVersion
  #   Properties:
  #     LayerName: AWS-SDK-Pandas
  #     Description: AWS SDK for pandas (awswrangler)
  #     ContentUri: arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python312:16
  #     CompatibleRuntimes:
  #       - python3.12
  #       - python3.13
        

  PushOpensearchFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: './push-opensearch/'
      Description: 'This Lambda Function gets output from Title, Description and Features and push to Opensearch Serverless'
      MemorySize: 128
      Timeout: 60
      Handler: lambda_function.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      EphemeralStorage:
        Size: 512
      Environment:
        Variables:  
          #ENDPOINT: !Sub !Join [".", [${OpenSearchServerlessCollection.Id},${AWS::Region},"aoss.amazonaws.com"] ] 
          ENDPOINT: !Sub "${OpenSearchServerlessCollection.Id}.${AWS::Region}.aoss.amazonaws.com"
          REGION: !Sub ${AWS::Region}
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 21600
        MaximumRetryAttempts: 2
      PackageType: Zip
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt  DeadLetterQueue.Arn
      ReservedConcurrentExecutions: 10
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      KmsKeyArn: !GetAtt  KMSKeyEnhancementFunction.Arn
      Policies:
        - Statement:
            - Sid: VisualEditor0
              Effect: Allow
              Action:
                - aoss:APIAccessAll
                - aoss:BatchGetLifecyclePolicy
                - aoss:GetAccessPolicy
                - aoss:CreateAccessPolicy
                - aoss:UpdateSecurityConfig
                - aoss:UpdateLifecyclePolicy
                - aoss:UpdateVpcEndpoint
                - aoss:UpdateSecurityPolicy
                - aoss:CreateLifecyclePolicy
                - aoss:ListAccessPolicies
                - aoss:ListSecurityPolicies
                - aoss:UpdateAccessPolicy
                - aoss:DeleteSecurityPolicy
                - aoss:UntagResource
                - aoss:GetSecurityPolicy
                - aoss:ListTagsForResource
                - aoss:BatchGetCollection
                - aoss:ListLifecyclePolicies
                - aoss:ListSecurityConfigs
                - aoss:DeleteLifecyclePolicy
                - aoss:CreateSecurityConfig
                - aoss:CreateSecurityPolicy
                - aoss:TagResource
                - aoss:DeleteVpcEndpoint
                - aoss:BatchGetVpcEndpoint
                - aoss:GetPoliciesStats
                - aoss:ListVpcEndpoints
                - aoss:UpdateAccountSettings
                - aoss:GetAccountSettings
                - aoss:GetSecurityConfig
                - aoss:CreateVpcEndpoint
                - aoss:BatchGetEffectiveLifecyclePolicy
                - aoss:DeleteSecurityConfig
                - aoss:ListCollections
                - aoss:DeleteAccessPolicy
                - aoss:CreateCollection
              Resource: '*'
            - Sid: VisualEditor1
              Effect: Allow
              Action:
                - aoss:ListCollections
                - aoss:DashboardsAccessAll
              Resource:
                -  !Sub 'arn:aws:aoss:*:${AWS::AccountId}:collection/*'
                -  !Sub 'arn:aws:aoss:*:${AWS::AccountId}:dashboards/default'
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
              Resource:  !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                -  !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/push-opensearch:*'
      RecursiveLoop: Terminate
      SnapStart:
        ApplyOn: None
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto
      Layers: 
        - "arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python312:16"
  
  TitleEnhancerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: './title-enhancer/'
      Description: 'Lambda function takes a product title as input and returns a modified version of the title generated using a language model.'
      MemorySize: 128
      Timeout: 60
      Handler: lambda_function.lambda_handler
      Runtime: python3.12
      Architectures:
        - arm64
      EphemeralStorage:
        Size: 512
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 21600
        MaximumRetryAttempts: 2
      PackageType: Zip
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt  DeadLetterQueue.Arn
      ReservedConcurrentExecutions: 10
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2      
      KmsKeyArn: !GetAtt  KMSKeyEnhancementFunction.Arn
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
              Resource:  !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                -  !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/title-enhancer:*'
            - Sid: BedrockAll
              Effect: Allow
              Action:
                - bedrock:InvokeModel
                - bedrock:ListFoundationModels
              Resource:
                - arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0
                - arn:aws:bedrock:us-east-1::inference-profile/us.anthropic.claude-3-sonnet-20240229-v1:0
                - arn:aws:bedrock:us-west-2::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0
                - !Sub arn:aws:bedrock:us-east-1:${AWS::AccountId}:foundation-model/anthropic.claude-3-sonnet-20240229-v1:0
                - !Sub arn:aws:bedrock:us-east-1:${AWS::AccountId}:inference-profile/us.anthropic.claude-3-sonnet-20240229-v1:0
                - !Sub arn:aws:bedrock:us-west-2:${AWS::AccountId}:foundation-model/anthropic.claude-3-sonnet-20240229-v1:0                
            - Sid: DescribeKey
              Effect: Allow
              Action:
                - kms:DescribeKey
              Resource: !Sub 'arn:*:kms:${AWS::Region}:${AWS::AccountId}::*'
            - Sid: APIsWithAllResourceAccess
              Effect: Allow
              Action:
                - iam:ListRoles
                - ec2:DescribeVpcs
                - ec2:DescribeSubnets
                - ec2:DescribeSecurityGroups
              Resource: '*'
            - Sid: PassRoleToBedrock
              Effect: Allow
              Action:
                - iam:PassRole
              Resource: arn:aws:iam::*:role/*AmazonBedrock*
              Condition:
                StringEquals:
                  iam:PassedToService:
                    - bedrock.amazonaws.com
      RecursiveLoop: Terminate
      SnapStart:
        ApplyOn: None
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto

  StateMachine30021eef:
    Type: AWS::Serverless::StateMachine
    Properties:
      Definition:
        StartAt: Enhance Title
        Comment: >-
          An example of itegrating lambda functtions in Step Functions state
          machine.
        States:
          Enhance Title:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
              FunctionName: ${lambdainvoke_FunctionName_7cca2b3e}
              Payload.$: $
            Next: Enhance Description
            ResultPath: $.result.title
          Enhance Description:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
              FunctionName: ${lambdainvoke_FunctionName_f2f1cc15}
              Payload.$: $
            Next: Extract Features
            ResultPath: $.result.description
          Extract Features:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
              FunctionName: ${lambdainvoke_FunctionName_a994982a}
              Payload.$: $
            Next: Pass
            ResultPath: $.result.features
          Pass:
            Type: Pass
            Next: Push to Opensearch
            Parameters:
              title.$: $.result.title.Payload.title
              description.$: $.result.description.Payload.description
              features.$: $.result.features.Payload.features
          Push to Opensearch:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            OutputPath: $.Payload
            Parameters:
              Payload.$: $
              FunctionName: ${lambdainvoke_FunctionName_e711db3e}
            Retry:
              - ErrorEquals:
                  - Lambda.ServiceException
                  - Lambda.AWSLambdaException
                  - Lambda.SdkClientException
                  - Lambda.TooManyRequestsException
                IntervalSeconds: 1
                MaxAttempts: 3
                BackoffRate: 2
                JitterStrategy: FULL
            Next: Success
          Success:
            Type: Succeed
      DefinitionSubstitutions:
        lambdainvoke_FunctionName_7cca2b3e: !GetAtt TitleEnhancerFunction.Arn
        lambdainvoke_FunctionName_f2f1cc15: !GetAtt DescriptionEnhancerFunction.Arn
        lambdainvoke_FunctionName_a994982a: !GetAtt FeatureExtractionFunction.Arn
        lambdainvoke_FunctionName_e711db3e: !GetAtt PushOpensearchFunction.Arn       
      Name: StateMachine30021eef
      Type: STANDARD
      Role:
        Fn::GetAtt:
          - Role302d73ac
          - Arn
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn:
                Fn::GetAtt:
                  - LogGroup1a018160
                  - Arn
  Role302d73ac:
    Type: AWS::IAM::Role
    Properties:
      RoleName: StepFunctions_IAM_ROLE_enhancement-orchestrationdd190b9a
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      MaxSessionDuration: 3600
  Policyb46785a6:
    Type: AWS::IAM::RolePolicy
    Properties:
      PolicyName: SnsPublishScopedAccessPolicy33d8afbf
      RoleName:
        Ref: Role302d73ac
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sns:Publish
            Resource:
              - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:MySnsTopic'
  Policy866f6134:
    Type: AWS::IAM::RolePolicy
    Properties:
      PolicyName: XRayAccessPolicyfbbf8107
      RoleName:
        Ref: Role302d73ac
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - xray:PutTraceSegments
              - xray:PutTelemetryRecords
              - xray:GetSamplingRules
              - xray:GetSamplingTargets
            Resource:
              - '*'
  Policyf2c89aac:
    Type: AWS::IAM::RolePolicy
    Properties:
      PolicyName: LambdaInvokeScopedAccessPolicy5982d761
      RoleName:
        Ref: Role302d73ac
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:MyLambdaFunction:*'
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:MyLambdaFunction'
  Policyf5d2b3e9:
    Type: AWS::IAM::RolePolicy
    Properties:
      PolicyName: CloudWatchLogsDeliveryFullAccessPolicy45ad425d
      RoleName:
        Ref: Role302d73ac
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogDelivery
              - logs:GetLogDelivery
              - logs:UpdateLogDelivery
              - logs:DeleteLogDelivery
              - logs:ListLogDeliveries
              - logs:PutResourcePolicy
              - logs:DescribeResourcePolicies
              - logs:DescribeLogGroups
            Resource: '*'
  Policy0ebab043:
    Type: AWS::IAM::RolePolicy
    Properties:
      PolicyName: lambda24bc1c78
      RoleName:
        Ref: Role302d73ac
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              - !GetAtt TitleEnhancerFunction.Arn
              - !GetAtt PushOpensearchFunction.Arn
              - !GetAtt FeatureExtractionFunction.Arn
              - !GetAtt DescriptionEnhancerFunction.Arn

  LogGroup1a018160:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/vendedlogs/states/StateMachine30021eef-Logs
      RetentionInDays: 3
      KmsKeyId: !GetAtt KMSKeyEnhancementFunction.Arn
    

  OpenSearchServerlessCollection:
    Type: AWS::OpenSearchServerless::Collection
    Properties:
      Description: 'Serverless Collection for Enhanced Search'
      Name: !Ref CollectionName
      StandbyReplicas: ENABLED
      Type: VECTORSEARCH
    DependsOn: OpenSearchServerlessSecurityPolicy00encryption00gZ3hA

  OpenSearchServerlessSecurityPolicy00encryption00gZ3hA:
    Type: AWS::OpenSearchServerless::SecurityPolicy
    Properties:
      Policy: !Sub >-
        {"Rules":[{"ResourceType":"collection","Resource":["collection/${CollectionName}"]}],"AWSOwnedKey":true}
      Type: encryption
      Description: !Sub '${CollectionName}-encryption'
      Name: !Sub 'policy-encrypt-${CollectionName}'
    

  OpenSearchServerlessAccessPolicy00data00pBTWQ:
    Type: AWS::OpenSearchServerless::AccessPolicy
    Properties:
      Policy: !Sub '[{"Rules": [{"Resource":
        ["collection/${CollectionName}"],"Permission":
        ["aoss:CreateCollectionItems", "aoss:DeleteCollectionItems",
        "aoss:UpdateCollectionItems",
        "aoss:DescribeCollectionItems"],"ResourceType": "collection"},
        {"Resource": ["index/${CollectionName}/*"],"Permission":
        ["aoss:CreateIndex", "aoss:DeleteIndex", "aoss:UpdateIndex",
        "aoss:DescribeIndex", "aoss:ReadDocument",
        "aoss:WriteDocument"],"ResourceType": "index"}],"Principal":
        ["${PushOpensearchFunctionRole.Arn}"],"Description":
        "lambdaPolicy"}]'
      Type: data
      Name: lambdaaccesspolicy


  OpenSearchServerlessAccessPolicy00data00McPGK:
    Type: AWS::OpenSearchServerless::AccessPolicy
    Properties:
      Policy: !Sub '[{"Rules": [{"Resource":
        ["collection/${CollectionName}"],"Permission":
        ["aoss:CreateCollectionItems", "aoss:DeleteCollectionItems",
        "aoss:UpdateCollectionItems",
        "aoss:DescribeCollectionItems"],"ResourceType": "collection"},
        {"Resource": ["index/${CollectionName}/*"],"Permission":
        ["aoss:CreateIndex", "aoss:DeleteIndex", "aoss:UpdateIndex",
        "aoss:DescribeIndex", "aoss:ReadDocument",
        "aoss:WriteDocument"],"ResourceType": "index"}],"Principal":
        ["arn:aws:iam::${AWS::AccountId}:role/admin"],"Description": "Easy data
        policy"}]'
      Type: data
      Description: Easy data policy
      Name: easy-guidance-collection
    
  OpenSearchServerlessSecurityPolicy00network00KUrFV:
    Type: AWS::OpenSearchServerless::SecurityPolicy
    Properties:
      Policy: !Sub '[{"Rules": [{"Resource":
        ["collection/${CollectionName}"],"ResourceType": "collection"},
        {"Resource": ["collection/${CollectionName}"],"ResourceType":
        "dashboard"}],"AllowFromPublic": true}]'
      Type: network
      Description: guidance-collection-network
      Name: !Sub 'network-policy-${CollectionName}'
    

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-dlq'
      KmsMasterKeyId: alias/aws/sqs


  # create a kms key and allow lambda function to use
  KMSKeyEnhancementFunction:
    Type: AWS::KMS::Key
    Properties:
      Description: 'KMS key for the lambda function'
      Enabled: true
      EnableKeyRotation: true
      RotationPeriodInDays: 90
      KeyPolicy:
        Version: '2012-10-17' 
        Id: root-account
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow cloudtrail use of the key
            Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"     
            Resource: '*' 
          - Sid: Allow cloudwatch logs of the key
            Effect: Allow
            Principal:
              Service: "logs.amazonaws.com"
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"  
            Resource: '*'     
      Tags:
        - Key: tag-key
          Value: tag-value


  privateapiguidancevpceSecurityGroup8C8216BD:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: privateapiguidancevpceSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: '-1'
      SecurityGroupIngress:
        - CidrIp: !GetAtt VPC.CidrBlock
          Description: !Join 
            - ''
            - - 'from '
              - !GetAtt VPC.CidrBlock
              - ':443'
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId: !Ref VPC

  Privateapiguidancevpce487DB922:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      ServiceName: !Join 
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .execute-api
      VpcId: !Ref VPC
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !GetAtt privateapiguidancevpceSecurityGroup8C8216BD.GroupId
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      VpcEndpointType: Interface

  MyHttpApi3:
    Type: AWS::Serverless::Api
    Properties:
     DefinitionBody:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:          
            Location: './api.yaml'
     StageName: test-stage
     EndpointConfiguration:
       Type: PRIVATE
       VPCEndpointIds:
         - !Ref Privateapiguidancevpce487DB922
     Auth:
       ResourcePolicy:
         IntrinsicVpcWhitelist:
           - !Ref VPC
     AccessLogSetting:
        DestinationArn: !GetAtt MyLogGroup.Arn
        Format: $context.extendedRequestId $context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId


  RoleApiGw:
   Type: AWS::IAM::Role
   Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: apigw
          PolicyDocument:
            Version: '2012-10-17'
            Statement:              
              - Effect: Allow
                Action: states:StartExecution
                Resource: !Ref StateMachine30021eef
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  Account:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt 
        - RoleApiGw
        - Arn

  MyLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - '-'
        - - !Ref MyHttpApi3
          - access-logs
      RetentionInDays: 3

  RequestValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      Name: RequestValidatorInput
      RestApiId: !Ref MyHttpApi3
      ValidateRequestBody: True
      ValidateRequestParameters: True

Outputs:
  FeatureExtractionFunction:
    Description: FeatureExtractionFunction Function ARN
    Value: !GetAtt FeatureExtractionFunction.Arn

  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref NoIngressSecurityGroup


#ref: https://stackoverflow.com/questions/42914487/how-to-invoke-an-aws-step-function-using-api-gateway
#lambda layer ref: https://aws-sdk-pandas.readthedocs.io/en/3.11.0/layers.html